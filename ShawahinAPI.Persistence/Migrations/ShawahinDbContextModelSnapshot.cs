// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShawahinAPI.Persistence;

#nullable disable

namespace ShawahinAPI.Persistence.Migrations
{
    [DbContext(typeof(ShawahinDbContext))]
    partial class ShawahinDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.Chargers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ChargerCost")
                        .HasColumnType("float");

                    b.Property<string>("ChargerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChargerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentChargerStatus")
                        .HasColumnType("int");

                    b.Property<string>("ElectricType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PowerKw")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargerTypeId");

                    b.ToTable("Chargers");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingSessions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChargingStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnergyConsumed")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ChargingSessions");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationRequests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChargersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChargesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Request_Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StationOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChargersId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StationOpeningHoursId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("StationRequest");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChargersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChargesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("int");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<Guid>("StationOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalRevenue")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserUsedCount")
                        .HasColumnType("int");

                    b.Property<int>("views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargersId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StationOpeningHoursId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.ChargerStationComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("StationComments");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.ChargerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChargerLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charger_Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChargerTypes");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.Contacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.FavoriteStations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteStations");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.StationOpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("FridayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("FridayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MondayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MondayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SaturdayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SaturdayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SundayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SundayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ThursdayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ThursdayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TuesdayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TuesdayStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WednesdayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WednesdayStartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("chargingStationsHours");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityComments");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityEvents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPostId");

                    b.ToTable("CommunityEvents");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityPosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Upvotes")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPosts");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CummunityEntities.CommunityEvNews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPostId");

                    b.ToTable("EvNews");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.Locations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.FavoriteServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteServices");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.ServiceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceInfo");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.ServiceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceReq");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntitiess.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.Chargers", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStationsEntities.ChargerType", "ChargerType")
                        .WithMany("chargers")
                        .HasForeignKey("ChargerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargerType");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingSessions", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStations", "ChargingStation")
                        .WithMany()
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationRequests", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.Chargers", "Chargers")
                        .WithMany()
                        .HasForeignKey("ChargersId");

                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStationsEntities.Contacts", "Contact")
                        .WithMany("ChargingStationRequests")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.Locations", "Location")
                        .WithMany("ChargingStationRequests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStationsEntities.StationOpeningHours", "StationOpeningHours")
                        .WithOne("chargingStationRequests")
                        .HasForeignKey("ShawahinAPI.Core.Entities.ChargingStationRequests", "StationOpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("ChargingStationsRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Chargers");

                    b.Navigation("Contact");

                    b.Navigation("Location");

                    b.Navigation("StationOpeningHours");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStations", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.Chargers", "Chargers")
                        .WithMany()
                        .HasForeignKey("ChargersId");

                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStationsEntities.Contacts", "Contact")
                        .WithMany("ChargingStations")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.Locations", "Location")
                        .WithMany("ChargingStations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStationsEntities.StationOpeningHours", "StationOpeningHours")
                        .WithOne("ChargingStation")
                        .HasForeignKey("ShawahinAPI.Core.Entities.ChargingStations", "StationOpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("ChargingStations")
                        .HasForeignKey("UserId");

                    b.Navigation("Chargers");

                    b.Navigation("Contact");

                    b.Navigation("Location");

                    b.Navigation("StationOpeningHours");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.ChargerStationComments", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStations", "ChargingStation")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.FavoriteStations", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ChargingStations", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityComments", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.CommunityPosts", "CommunityPost")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityEvents", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("CommunityEvents")
                        .HasForeignKey("UserPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityPosts", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CummunityEntities.CommunityEvNews", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("CommunityEvNewsList")
                        .HasForeignKey("UserPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.FavoriteServices", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ServicesEntities.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("FavoriteServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.ServiceInfo", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ServicesEntitiess.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.ServiceRequest", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ServicesEntities.ServiceInfo", "ServiceInfo")
                        .WithMany()
                        .HasForeignKey("ServiceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntities.Services", b =>
                {
                    b.HasOne("ShawahinAPI.Core.Entities.ServicesEntities.ServiceInfo", "ServiceInfo")
                        .WithMany()
                        .HasForeignKey("ServiceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShawahinAPI.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ChargingStations");

                    b.Navigation("ChargingStationsRequests");

                    b.Navigation("CommunityEvNewsList");

                    b.Navigation("CommunityEvents");

                    b.Navigation("CommunityPosts");

                    b.Navigation("FavoriteServices");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.ChargerType", b =>
                {
                    b.Navigation("chargers");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.Contacts", b =>
                {
                    b.Navigation("ChargingStationRequests");

                    b.Navigation("ChargingStations");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ChargingStationsEntities.StationOpeningHours", b =>
                {
                    b.Navigation("ChargingStation");

                    b.Navigation("chargingStationRequests");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.CommunityPosts", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.Locations", b =>
                {
                    b.Navigation("ChargingStationRequests");

                    b.Navigation("ChargingStations");
                });

            modelBuilder.Entity("ShawahinAPI.Core.Entities.ServicesEntitiess.ServiceType", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
